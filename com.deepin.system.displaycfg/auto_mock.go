// Code generated by "./generator ./com.deepin.system.displaycfg/"; DO NOT EDIT.

package displaycfg

import (
	"fmt"

	"github.com/godbus/dbus"
	"github.com/stretchr/testify/mock"
	"pkg.deepin.io/lib/dbusutil"
	"pkg.deepin.io/lib/dbusutil/proxy"
)

type MockDisplayCfg struct {
	MockInterfaceDisplayCfg // interface com.deepin.system.DisplayCfg
	proxy.MockObject
}

type MockInterfaceDisplayCfg struct {
	mock.Mock
}

// method Get

func (v *MockInterfaceDisplayCfg) GoGet(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceDisplayCfg) Get(flags dbus.Flags) (string, error) {
	mockArgs := v.Called(flags)

	return mockArgs.String(0), mockArgs.Error(1)
}

// method Set

func (v *MockInterfaceDisplayCfg) GoSet(flags dbus.Flags, ch chan *dbus.Call, cfgStr string) *dbus.Call {
	mockArgs := v.Called(flags, ch, cfgStr)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceDisplayCfg) Set(flags dbus.Flags, cfgStr string) error {
	mockArgs := v.Called(flags, cfgStr)

	return mockArgs.Error(0)
}

// signal Updated

func (v *MockInterfaceDisplayCfg) ConnectUpdated(cb func(updateAt string)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}
