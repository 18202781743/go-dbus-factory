// Code generated by "./generator ./com.deepin.daemon.apps"; DO NOT EDIT.

package apps

import (
	"fmt"

	"github.com/godbus/dbus"
	"github.com/stretchr/testify/mock"
	"pkg.deepin.io/lib/dbusutil"
)

type MockApps struct {
	mockInterfaceDesktopFileWatcher // interface com.deepin.daemon.Apps.DesktopFileWatcher
	mockInterfaceLaunchedRecorder   // interface com.deepin.daemon.Apps.LaunchedRecorder
}

type mockInterfaceDesktopFileWatcher struct {
	mock.Mock
}

// signal Event

func (v *mockInterfaceDesktopFileWatcher) ConnectEvent(cb func(name string, op uint32)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

type mockInterfaceLaunchedRecorder struct {
	mock.Mock
}

// method GetNew

func (v *mockInterfaceLaunchedRecorder) GoGetNew(flags dbus.Flags, ch chan *dbus.Call) *dbus.Call {
	mockArgs := v.Called(flags, ch)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *mockInterfaceLaunchedRecorder) GetNew(flags dbus.Flags) (map[string][]string, error) {
	mockArgs := v.Called(flags)

	ret0, ok := mockArgs.Get(0).(map[string][]string)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// method MarkLaunched

func (v *mockInterfaceLaunchedRecorder) GoMarkLaunched(flags dbus.Flags, ch chan *dbus.Call, desktopFile string) *dbus.Call {
	mockArgs := v.Called(flags, ch, desktopFile)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *mockInterfaceLaunchedRecorder) MarkLaunched(flags dbus.Flags, desktopFile string) error {
	mockArgs := v.Called(flags, desktopFile)

	return mockArgs.Error(0)
}

// method UninstallHints

func (v *mockInterfaceLaunchedRecorder) GoUninstallHints(flags dbus.Flags, ch chan *dbus.Call, desktopFiles []string) *dbus.Call {
	mockArgs := v.Called(flags, ch, desktopFiles)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *mockInterfaceLaunchedRecorder) UninstallHints(flags dbus.Flags, desktopFiles []string) error {
	mockArgs := v.Called(flags, desktopFiles)

	return mockArgs.Error(0)
}

// method WatchDirs

func (v *mockInterfaceLaunchedRecorder) GoWatchDirs(flags dbus.Flags, ch chan *dbus.Call, dirs []string) *dbus.Call {
	mockArgs := v.Called(flags, ch, dirs)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *mockInterfaceLaunchedRecorder) WatchDirs(flags dbus.Flags, dirs []string) error {
	mockArgs := v.Called(flags, dirs)

	return mockArgs.Error(0)
}

// signal Launched

func (v *mockInterfaceLaunchedRecorder) ConnectLaunched(cb func(file string)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// signal StatusSaved

func (v *mockInterfaceLaunchedRecorder) ConnectStatusSaved(cb func(root string, file string, ok bool)) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}

// signal ServiceRestarted

func (v *mockInterfaceLaunchedRecorder) ConnectServiceRestarted(cb func()) (dbusutil.SignalHandlerId, error) {
	mockArgs := v.Called(cb)

	ret0, ok := mockArgs.Get(0).(dbusutil.SignalHandlerId)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: %d failed because object wasn't correct type: %v", 0, mockArgs.Get(0)))
	}

	return ret0, mockArgs.Error(1)
}
