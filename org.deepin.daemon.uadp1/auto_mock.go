// Code generated by "./generator ./org.deepin.daemon.uadp1"; DO NOT EDIT.

package uadp1

import "fmt"
import "github.com/godbus/dbus"

import "github.com/linuxdeepin/go-lib/dbusutil/proxy"
import "github.com/stretchr/testify/mock"

type MockUadp struct {
	MockInterfaceUadp // interface org.deepin.daemon.Uadp1
	proxy.MockObject
}

type MockInterfaceUadp struct {
	mock.Mock
}

// method SetDataKey

func (v *MockInterfaceUadp) GoSetDataKey(flags dbus.Flags, ch chan *dbus.Call, exePath string, keyName string, dataKey string, keyringKey string) *dbus.Call {
	mockArgs := v.Called(flags, ch, exePath, keyName, dataKey, keyringKey)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceUadp) SetDataKey(flags dbus.Flags, exePath string, keyName string, dataKey string, keyringKey string) error {
	mockArgs := v.Called(flags, exePath, keyName, dataKey, keyringKey)

	return mockArgs.Error(0)
}

// method GetDataKey

func (v *MockInterfaceUadp) GoGetDataKey(flags dbus.Flags, ch chan *dbus.Call, exePath string, keyName string, keyringKey string) *dbus.Call {
	mockArgs := v.Called(flags, ch, exePath, keyName, keyringKey)

	ret, ok := mockArgs.Get(0).(*dbus.Call)
	if !ok {
		panic(fmt.Sprintf("assert: arguments: 0 failed because object wasn't correct type: %v", mockArgs.Get(0)))
	}

	return ret
}

func (v *MockInterfaceUadp) GetDataKey(flags dbus.Flags, exePath string, keyName string, keyringKey string) (string, error) {
	mockArgs := v.Called(flags, exePath, keyName, keyringKey)

	return mockArgs.String(0), mockArgs.Error(1)
}
