// Code generated by "./generator ./system/org.deepin.dde.uadp1"; DO NOT EDIT.

package uadp1

import "github.com/godbus/dbus"

import "github.com/linuxdeepin/go-lib/dbusutil/proxy"
import "unsafe"

type Uadp interface {
	uadp // interface org.deepin.dde.Uadp1
	proxy.Object
}

type objectUadp struct {
	interfaceUadp // interface org.deepin.dde.Uadp1
	proxy.ImplObject
}

func NewUadp(conn *dbus.Conn) Uadp {
	obj := new(objectUadp)
	obj.ImplObject.Init_(conn, "org.deepin.dde.Uadp1", "/org/deepin/dde/Uadp1")
	return obj
}

type uadp interface {
	GoSetDataKey(flags dbus.Flags, ch chan *dbus.Call, exePath string, keyName string, dataKey string, keyringKey string) *dbus.Call
	SetDataKey(flags dbus.Flags, exePath string, keyName string, dataKey string, keyringKey string) error
	GoGetDataKey(flags dbus.Flags, ch chan *dbus.Call, exePath string, keyName string, keyringKey string) *dbus.Call
	GetDataKey(flags dbus.Flags, exePath string, keyName string, keyringKey string) (string, error)
}

type interfaceUadp struct{}

func (v *interfaceUadp) GetObject_() *proxy.ImplObject {
	return (*proxy.ImplObject)(unsafe.Pointer(v))
}

func (*interfaceUadp) GetInterfaceName_() string {
	return "org.deepin.dde.Uadp1"
}

// method SetDataKey

func (v *interfaceUadp) GoSetDataKey(flags dbus.Flags, ch chan *dbus.Call, exePath string, keyName string, dataKey string, keyringKey string) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".SetDataKey", flags, ch, exePath, keyName, dataKey, keyringKey)
}

func (v *interfaceUadp) SetDataKey(flags dbus.Flags, exePath string, keyName string, dataKey string, keyringKey string) error {
	return (<-v.GoSetDataKey(flags, make(chan *dbus.Call, 1), exePath, keyName, dataKey, keyringKey).Done).Err
}

// method GetDataKey

func (v *interfaceUadp) GoGetDataKey(flags dbus.Flags, ch chan *dbus.Call, exePath string, keyName string, keyringKey string) *dbus.Call {
	return v.GetObject_().Go_(v.GetInterfaceName_()+".GetDataKey", flags, ch, exePath, keyName, keyringKey)
}

func (*interfaceUadp) StoreGetDataKey(call *dbus.Call) (dataKey string, err error) {
	err = call.Store(&dataKey)
	return
}

func (v *interfaceUadp) GetDataKey(flags dbus.Flags, exePath string, keyName string, keyringKey string) (string, error) {
	return v.StoreGetDataKey(
		<-v.GoGetDataKey(flags, make(chan *dbus.Call, 1), exePath, keyName, keyringKey).Done)
}
